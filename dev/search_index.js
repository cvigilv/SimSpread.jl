var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimSpread","category":"page"},{"location":"#SimSpread","page":"Home","title":"SimSpread","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimSpread.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SimSpread]","category":"page"},{"location":"#Base.split-Tuple{NamedArrays.NamedArray, Int64}","page":"Home","title":"Base.split","text":"split(DT::NamedArray, k::Int64, rng::Int64)\n\nSplit all possible D into k groups for cross-validation.\n\nLong description\n\nSplit drugs D into k groups, extract their edges and append to cross-validation group.\n\nArguments\n\nDT::AbstractMatrix: Drug-Target rectangular adjacency matrix.\nk::Int64: Number of groups to use in data splitting.\nrng::Int64: Seed used for data splitting.\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.AuPRC-Tuple{AbstractVector{Bool}, AbstractVector}","page":"Home","title":"SimSpread.AuPRC","text":"AuPRC(y::AbstractArray{Bool}, yhat::AbstractArray{Number})\n\nArea under the Precision-Recall curve using the trapezoidal rule.\n\nArguments\n\ny::AbstractArray: Binary class labels. 1 for positive class, 0 otherwise.\n̂yhat::AbstractArray: Prediction values.\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.AuROC-Tuple{AbstractVector{Bool}, AbstractVector}","page":"Home","title":"SimSpread.AuROC","text":"AuROC(y::AbstractArray{Bool}, yhat::AbstractVector{Number})\n\nArea under the Receiver Operator Characteristic curve using the trapezoidal rule.\n\nArguments\n\ny::AbstractArray: Binary class labels. 1 for positive class, 0 otherwise.\n̂yhat::AbstractArray: Prediction values.\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.BEDROC-Tuple{AbstractVector{Bool}, AbstractVector}","page":"Home","title":"SimSpread.BEDROC","text":"BEDROC(y, yhat; rev = true, α = 20.0)\n\nThe Boltzmann Enhanced Descrimination of the Receiver Operator Characteristic (BEDROC) score is a modification of the Receiver Operator Characteristic (ROC) score that allows for a factor of early recognition.\n\nScore takes a value in interval [0, 1] indicating degree to which the predictive model employed detects (early) the positive class.\n\nArguments\n\ny::AbstractArray: Binary class labels. 1 for positive class, 0 otherwise.\n̂yhat::AbstractArray: Prediction values.\nrev::Bool: True if high values of yhat correlates to positive class (default = true).\nα::AbstractFloat: Early recognition parameter (default = 20.0).\n\nReferences\n\nTruchon, J.-F., & Bayly, C. I. (2007). Evaluating Virtual Screening Methods:  Good and\n\nBad Metrics for the “Early Recognition” Problem. Journal of Chemical Information and Modeling, 47(2), 488–508. https://doi.org/10.1021/ci600426e\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread._namedmatrix2matrix-Tuple{NamedArrays.NamedMatrix}","page":"Home","title":"SimSpread._namedmatrix2matrix","text":"_namedmatrix2matrix(M::NamedMatrix)\n\nConvert NamedMatrix to Base.Array with row / column of names\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread._parse_matrix","page":"Home","title":"SimSpread._parse_matrix","text":"_parse_matrix(M::AbstractMatrix, rows::Bool, cols::Bool; type::Type)\n\nConvert matrix with row/column names to NamedMatrix (assumes names are in firt row/column).\n\nArguments\n\nM::AbstractMatrix : Matrix to parse\nrows::Bool : Matrix has row names (default = false)\ncols::Bool : Matrix has column names (default = false)\ntype::Type : Type of matrix values (default = Any)\n\n\n\n\n\n","category":"function"},{"location":"#SimSpread.accuracy-Union{Tuple{T}, NTuple{4, T}} where T<:Integer","page":"Home","title":"SimSpread.accuracy","text":"accuracy(tn::T, fp::T, fn::T, tp::T) where {T<:Integer}\n\nThe number of all correct predictions divided by the total predicitions\n\nArguments\n\ntn::Integer True negatives\nfp::Integer False postives\nfn::Integer False negatives\ntp::Integer True positives\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.balancedaccuracy-Union{Tuple{T}, NTuple{4, T}} where T<:Integer","page":"Home","title":"SimSpread.balancedaccuracy","text":"balancedaccuracy(tn::T, fp::T, fn::T, tp::T) where {T<:Integer}\n\nThe arithmetic mean of sensitivity and specificity, its use case is when dealing with imbalanced data\n\nArguments\n\ntn::Integer True negatives\nfp::Integer False postives\nfn::Integer False negatives\ntp::Integer True positives\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.clamp-Tuple{Number, Number, Number}","page":"Home","title":"SimSpread.clamp","text":"clamp(val::Number, vmin::Number, vmax::Number)\n\nRestrict a value to a given range.\n\nArguments\n\nval::Number : Value to clamp\nvmin::Number : Value floor\nvmax::Number : Value roof\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.clean!-Tuple{NamedArrays.NamedArray, NamedArrays.NamedArray, NamedArrays.NamedArray}","page":"Home","title":"SimSpread.clean!","text":"clean!(R::NamedArray, A::NamedArray, DT::NamedArray)\n\nFlag errors from cross-validation splitting in place.\n\nArguments\n\nR::NamedArray: Predicted drug-target interactions adjacency matrix\nA::NamedArray: de novo NBI initial resources adjacency matrix\nDT::NamedArray: Ground-truth drug-target interactions adjacency matrix\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.cutoff!-Union{Tuple{T}, Tuple{AbstractVecOrMat{T}, T}, Tuple{AbstractVecOrMat{T}, T, Bool}} where T<:AbstractFloat","page":"Home","title":"SimSpread.cutoff!","text":"cutoff!(M::AbstractVecOrMat{T}, α::T, weighted::Bool=false) where {T<:AbstractFloat}\n\nTransform M based in SimSpread's similarity cutoff function, overwriting M.\n\nArguments\n\nM::T : Matrix or Vector to transform\nα::T : Similarity threshold\nweighted::Bool : Apply weighting function to outcome (default = false)\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.cutoff!-Union{Tuple{T}, Tuple{T, T}, Tuple{T, T, Bool}} where T<:AbstractFloat","page":"Home","title":"SimSpread.cutoff!","text":"cutoff!(x::T, α::T, weighted::Bool=false) where {T<:AbstractFloat}\n\nTransform x based in SimSpread's similarity cutoff function, overwriting x.\n\nArguments\n\nx::T : Value to transform\nα::T : Similarity matrix\nweighted::Bool : Apply weighting function to outcome (default = false)\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.cutoff-Union{Tuple{T}, Tuple{AbstractVecOrMat{T}, T}, Tuple{AbstractVecOrMat{T}, T, Bool}} where T<:AbstractFloat","page":"Home","title":"SimSpread.cutoff","text":"cutoff(x::AbstractMatrix{T}, α::T, weighted::Bool=false) where {T<:AbstractFloat}\n\nTransform M based in SimSpread's similarity cutoff function.\n\nArguments\n\nM::T : Matrix or Vector to transform\nα::T : Similarity threshold\nweighted::Bool : Apply weighting function to outcome (default = false)\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.cutoff-Union{Tuple{T}, Tuple{T, T}, Tuple{T, T, Bool}} where T<:AbstractFloat","page":"Home","title":"SimSpread.cutoff","text":"cutoff(x::T, α::T, weighted::Bool=false) where {T<:AbstractFloat}\n\nTransform x based in SimSpread's similarity cutoff function.\n\nArguments\n\nx::T : Value to transform\nα::T : Similarity matrix\nweighted::Bool : Apply weighting function to outcome (default = false)\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.f1score-Union{Tuple{T}, NTuple{4, T}} where T<:Integer","page":"Home","title":"SimSpread.f1score","text":"f1score(tn::T, fp::T, fn::T, tp::T) where {T<:Integer)\n\nThe harmonic mean between precision and recall\n\nArguments\n\ntn::Integer True negatives\nfp::Integer False postives\nfn::Integer False negatives\ntp::Integer True positives\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.featurize-Tuple{NamedArrays.NamedArray, AbstractFloat, AbstractFloat, Bool}","page":"Home","title":"SimSpread.featurize","text":"featurize(M::NamedArray, α::Float64, β::Float64, weighted::Bool)\n\nConvert continuous feature into binary feature based in 2 cutoffs: (i) α for strong-ties and (ii) β for weak-ties. Weighted version of function weights binary features with it's real value.\n\nArguments\n\nM::AbtractMatrix: Continuous feature matrix\nα::AbstractFloat: Strong-ties cutoff\nβ::AbstractFloat: Weak-ties cutoff\nweighted::Bool: Flag for feature weighting using real value\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.k-Tuple{Integer, AbstractMatrix}","page":"Home","title":"SimSpread.k","text":"k(G::AbstractMatrix)\n\nGet node degrees from adjacency matrix\n\nArguments\n\nM::AbstractMatrix : Matrix to parse\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.maxperformance-Tuple{Any, Function}","page":"Home","title":"SimSpread.maxperformance","text":"maxperf(confusion::ROCNums, metric::Function)\n\nGet maximum performance of a given metric over a set of confusion matrices.\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.mcc-Union{Tuple{T}, NTuple{4, T}} where T<:Integer","page":"Home","title":"SimSpread.mcc","text":"mcc(tn::T, fp::T, fn::T, tp::T) where {T<:Integer}\n\nMatthews correlation coefficient, a special case of the phi coeficient Performance metric used for overcoming the class imbalance issues\n\nArguments\n\ntn::Integer True negatives\nfp::Integer False postives\nfn::Integer False negatives\ntp::Integer True positives\n\nReference\n\n1.Chicco, D., Jurman, G. The advantages of the Matthews correlation coefficient (MCC) over F1 score and accuracy in binary classification evaluation. BMC Genomics 21, 6 (2020).\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.meanperformance-Tuple{MLBase.ROCNums, Function}","page":"Home","title":"SimSpread.meanperformance","text":"meanperf(confusion::ROCNums, metric::Function)\n\nGet mean performance of a given metric over a set of confusion matrices.\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.meanstdperformance-Tuple{MLBase.ROCNums, Function}","page":"Home","title":"SimSpread.meanstdperformance","text":"meanstdperf(confusion::ROCNums, metric::Function)\n\nGet mean and standard deviation performance of a given metric over a set of confusion matrices.\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.precision-Union{Tuple{T}, NTuple{4, T}} where T<:Integer","page":"Home","title":"SimSpread.precision","text":"precision(tn::T, fp::T, fn::T, tp::T) where {T<:Integer}\n\nThe fraction of positive predictions that are correct\n\nArguments\n\ntn::Integer True negatives\nfp::Integer False postives\nfn::Integer False negatives\ntp::Integer True positives\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.predict-Union{Tuple{T}, Tuple{T, T, Tuple}} where T<:(NamedArrays.NamedMatrix)","page":"Home","title":"SimSpread.predict","text":"predict(A::NamedMatrix, B::NamedMatrix, names::Tuple; GPU::Bool)\n\nTODO: Add short description to predict\n\nArguments\n\nA::NamedMatrix: Compound-Feature-Drug-Target initial resources adjacency matrix\nB::NamedMatrix: Feature-Drug-Target initial resources adjacency matrix\nnames::Tuple: Rows & columns named indices\nGPU::Bool: (default = false)\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.predict-Union{Tuple{T}, Tuple{Tuple{T, T}, NamedArrays.NamedMatrix}} where T<:(NamedArrays.NamedMatrix)","page":"Home","title":"SimSpread.predict","text":"predict(I::Tuple{T,T}, DT::T; GPU::Bool) where {T<:NamedArray}\n\nTODO: Add short description to predict\n\nArguments\n\nI::Tuple{NamedMatrix,NamedMatrix}: De novo initial resources adjacency matrices\nDT::NamedMatrix: Drug-target adjacency matrix\nGPU::Bool: Use GPU acceleration for calculation (default = false)\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.prepare!-Union{Tuple{T}, Tuple{T, T, AbstractVector}} where T<:(NamedArrays.NamedMatrix)","page":"Home","title":"SimSpread.prepare!","text":"prepare!(DT::T, DF::T, Cs::AbstractVector) where {T<:NamedMatrix}\n\nPrepare compound-feature-drug-target network adjacency matrix for de novo NBI prediction.\n\nArguments\n\nDT::NamedMatrix: Drug-Target adjacency matrix\nDF::NamedMatrix: Drug-Feature adjacency matrix\nCs::AbstractVector: Compounds to predict targets\n\nExtended help\n\nThis implementation is for k-fold or leave-one-out cross-validation.\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.prepare-Union{Tuple{T}, Tuple{T, T}} where T<:Tuple{NamedArrays.NamedMatrix, NamedArrays.NamedMatrix}","page":"Home","title":"SimSpread.prepare","text":"prepare(dts::T, dfs::T) where {T<:Tuple{NamedMatrix,NamedMatrix}}\n\nPrepare compound-feature-drug-target network adjacency matrix for de novo NBI predictions.\n\nArguments\n\ndts::Tuple{NamedMatrix,NamedMatrix} : Drug-Target adjacency matrices\ndfs::Tuple{NamedMatrix,NamedMatrix} : Drug-Feature adjacency matrices\n\nExtended help\n\nThis implementation is for time-split cross-validation.\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.read_namedmatrix","page":"Home","title":"SimSpread.read_namedmatrix","text":"read_namedmatrix(filepath::String, valuetype::Type = FLoat64filepath::String, valuetype::Type)\n\nLoad a matrix with named indices as a NamedArray.\n\nArguments\n\nfilepath::String : File path of matrix to load\ndelimiter::Char : Delimiter character between values in matrix (default = ' ')\nvaluetype::Type : Type of values contained in matrix (default = Float64)\n\n\n\n\n\n","category":"function"},{"location":"#SimSpread.recall-Union{Tuple{T}, NTuple{4, T}} where T<:Integer","page":"Home","title":"SimSpread.recall","text":"recall(tn::T, fp::T, fn::T, tp::T) where {T<:Integer}\n\nThe fraction of positive samples correctly predicted as postive\n\nArguments\n\ntn::Integer True negatives\nfp::Integer False postives\nfn::Integer False negatives\ntp::Integer True positives\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.save-Tuple{String, Int64, AbstractVector, NamedArrays.NamedMatrix, NamedArrays.NamedMatrix}","page":"Home","title":"SimSpread.save","text":"save(filepath::String, fidx::Int64, C::AbstractVector, R::NamedMatrix, DT::NamedMatrix)\n\nStore cross-valudation predictions as a table in the given file path.\n\nArguments\n\nfilepath::String : Output file path\nfidx::Int64 : Numeric fold ID\nC::AbstractVector : Test set compounds / ligands\nR::NamedMatrix : Predicted drug-targetinteraction adjacency  matrix\nDT::NamedMatrix : Ground-truth drug-target interactions adjacency matrix\n\nExtended help\n\nTable format is:\n\nFold ID, Compound ID, Target ID, SimSpread Score, True-Positive state\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.save-Tuple{String, NamedArrays.NamedMatrix, NamedArrays.NamedMatrix}","page":"Home","title":"SimSpread.save","text":"save(filepath::String, R::NamedMatrix, DT::NamedMatrix)\n\nStore predictions as a table in the given file path.\n\nArguments\n\nfilepath::String: Output file path\nR::NamedArray: Drug-target predictions matrix\nDT::NamedMatrix: Drug-target interactions adjacency matrix\n\nExtended help\n\nTable format is:\n\nfold, compound ID, target ID, score, TP\n\n\n\n\n\n","category":"method"},{"location":"#SimSpread.spread-Tuple{AbstractMatrix{Float64}}","page":"Home","title":"SimSpread.spread","text":"spread(F₀::AbstractMatrix{Float64})\n\nArguments\n\nF₀::AbstractMatrix{Float64}: Trilayered SimSpread network adjacency matrix\n\nReferences\n\nWu, et al (2016). SDTNBI: an integrated network and chemoinformatics tool for systematic prediction of drug–target interactions and drug repositioning. Briefings in Bioinformatics, bbw012. https://doi.org/10.1093/bib/bbw012\nVigil-Vásquez & Schüller (2022). De Novo Prediction of Drug Targets and Candidates by Chemical Similarity-Guided Network-Based Inference. International Journal of Molecular Sciences, 23(17), 9666. https://doi.org/10.3390/ijms23179666\n\n\n\n\n\n","category":"method"}]
}
